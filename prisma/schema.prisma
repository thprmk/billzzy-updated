// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Organisation {
  id                     Int       @id @default(autoincrement())
  password               String
  resetToken             String?   @map("reset_token")
  resetTokenExpiry       DateTime? @map("reset_token_expiry")
  email                  String    @unique
  phone                  String
  name                   String
  companySize            String    @map("company_size")
  shopName               String    @map("shop_name")
  flatNo                 String    @map("flatno")
  street                 String
  district               String
  city                   String?
  state                  String
  smsCount               Int       @default(0) @map("sms_count")
  smsCost                Float     @default(0) @map("sms_cost")
  country                String
  pincode                String
  mobileNumber           String    @map("mobile_number")
  landlineNumber         String?   @map("landline_number")
  websiteAddress         String?   @map("website_address")
  gstNumber              String?   @map("gst_number")
  subscriptionType       String    @map("subscription_type")
  endDate                DateTime  @map("end_date") @db.DateTime
  whatsappNumber         String?   @map("whatsapp_number")
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  razorpayAccessToken    String?   @map("razorpay_access_token") @db.Text
  razorpayRefreshToken   String?   @map("razorpay_refresh_token") @db.Text
  razorpayTokenExpiresAt DateTime? @map("razorpay_token_expires_at")
  razorpayAccountId      String?   @map("razorpay_account_id")
  razorpayState          String?   @map("razorpay_state")
  razorpayStateExpiresAt DateTime? @map("razorpay_state_expires_at")
  monthlyUsage           Int       @default(0)
  shopifyToken           String?   @map("shopify_token")
  shopifyDomain          String?   @map("shopify_domain")
  billCounter            Int       @default(0) @map("bill_counter") // <-- ADD THIS LINE

  // Relations
  productTypeTemplates ProductTypeTemplate[]
  productCategories   ProductCategory[]
  products            Product[]
  sellers             Seller[]
  transactions        TransactionRecord[]
  customers           Customer[]
  inventory           Inventory[]
  CustomerSubmission  CustomerSubmission[]
  ShippingMethod      ShippingMethod[]
  Mandate             Mandate[]
  activeMandates      ActiveMandate?
  MandateNotification MandateNotification[]
  customShippings     CustomShipping[] // <--- NEW RELATION
  taxes               Tax[] // <--- NEW RELATION
  gowhats   Gowhats?
  invoices            Invoice[]
  pendingScans PendingCustomerScan[]
  


  @@index([resetToken])
  @@map("organisation")
}

model CustomerSubmission {
  id             Int      @id @default(autoincrement())
  token          String   @unique
  organisationId Int
  customerId     Int?
  notes          String?
  status         String   @default("pending")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organisation Organisation @relation(fields: [organisationId], references: [id])
  customers    Customer?    @relation(fields: [customerId], references: [id])

  @@index([organisationId])
  @@map("CustomerSubmission") // Corrected map name
}

model ProductCategory {
  id             Int          @id @default(autoincrement())
  name           String
  organisationId Int          @map("organisation_id")
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  products  Product[]
  inventory Inventory[]


  @@map("product_categories")
}


model Product {
  id                      Int      @id @default(autoincrement())
  name                    String
  organisationId          Int      @map("organisation_id")
  categoryId              Int?     @map("category_id")

  // This is the new link to the template system
  productTypeTemplateId   Int?     @map("product_type_template_id")
  productTypeTemplate     ProductTypeTemplate? @relation(fields: [productTypeTemplateId], references: [id], onDelete: SetNull)

  // These fields are now ONLY for "Standard" products (where productTypeTemplateId is null)
  SKU                     String?
  netPrice                Float?   @map("net-price")
  sellingPrice            Float?   @map("selling-price")
  quantity                Int?

  organisation     Organisation      @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  category         ProductCategory?  @relation(fields: [categoryId], references: [id])
  inventory        Inventory[]
  transactionItems TransactionItem[]
  variants         ProductVariant[]
  invoiceItems     InvoiceItem[]
  
  @@map("products")
}

model Invoice {
  id                   Int       @id @default(autoincrement())
  invoiceNumber        String    @map("invoice_number")
  issueDate            DateTime  @db.Date
  dueDate              DateTime  @db.Date
  status               String    @default("DRAFT")
  notes                String?   @db.Text
  subTotal             Float     @map("sub_total")
  totalTax             Float     @map("total_tax")
  totalAmount          Float     @map("total_amount")
  customerId           Int?      @map("customer_id")
  customer             Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  organisationId       Int       @map("organisation_id")
  organisation         Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  items                InvoiceItem[]
  createdTransactionId Int?      @unique @map("created_transaction_id")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@unique([organisationId, invoiceNumber])
  @@map("invoices")
}

model InvoiceItem {
  id          Int     @id @default(autoincrement())
  description String
  quantity    Float
  unitPrice   Float   @map("unit_price")
  total       Float
  productId   Int?    @map("product_id")
  product     Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  invoiceId   Int     @map("invoice_id")
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}


model ProductTypeTemplate {
  id              Int      @id @default(autoincrement())
  name            String   // This will store "Apparel", "Electronics", etc.
  organisationId  Int      @map("organisation_id")
  organisation    Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  attributes      AttributeTemplate[]
  products        Product[]

  @@unique([name, organisationId])
  @@map("product_type_templates")
}

model AttributeTemplate {
  id                  Int      @id @default(autoincrement())
  name                String   // This will store "Size", "Color", etc. for a specific template
  templateId          Int      @map("template_id")
  template            ProductTypeTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("attribute_templates")
}


model ProductVariant {
  id           Int      @id @default(autoincrement())
  
  // --- Variant-specific data ---
  SKU          String   @unique
  netPrice     Float    @map("net_price")
  sellingPrice Float    @map("selling_price")
  quantity     Int      // Stock for THIS variant
  
  customAttributes Json? @map("custom_attributes")
  
  // --- Link back to the parent "Folder" product ---
  productId    Int      @map("product_id")
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  // --- Link to sales records ---
  transactionItems TransactionItem[]

  @@map("product_variants")
}

model Seller {
  id             Int          @id @default(autoincrement())
  name           String
  contact        String
  type           String
  organisationId Int          @map("organisation_id")
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@map("sellers")
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  EXPIRED
}

model TransactionRecord {
  id             Int           @id @default(autoincrement())
  billNo         Int           @unique @map("bill_no")
  totalPrice     Float         @map("total_price")
  paymentMethod  String        @map("payment_method")
  amountPaid     Float         @default(0) @map("amount_paid")
  balance        Float         @default(0)
  billingMode    String        @map("billing_mode")
  organisationId Int           @map("organisation_id")
  date           DateTime      @db.Date
  companyBillNo  Int?          @map("company_bill_no") // <-- ADD THIS LINE
  time           DateTime      @db.Time
  trackingNumber String?       @map("tracking_number")
  weight         Float?
  customerId     Int?          @map("customer_id")
  status         String        @default("confirmed")
  notes          String?       @db.Text
  paymentId      String?       @map("payment_id")
  paymentStatus  PaymentStatus @default(PENDING) @map("payment_status")
  isEdited       Boolean       @default(false) @map("isEdited") // Updated mapping for consistency if db is is_edited

  // --- NEW FIELDS ADDED TO THE DATABASE ---
  gstAmount        Float? @map("gst_amount")
  gstPercent       Float? @map("gst_percent")
  shippingCost     Float? // Assumes DB column name is 'shippingCost'
  shippingMethodId Int? // Assumes DB column name is 'shippingMethodId'
  // Optional: ADD @relation to ShippingMethod if desired
  // shippingMethod   ShippingMethod? @relation(fields: [shippingMethodId], references: [id], name: "TransactionShippingMethod")
  taxAmount        Float? // Assumes DB column name is 'taxAmount'

  salesSource     String? @map("sales_source")

  organisation        Organisation          @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  customer            Customer?             @relation(fields: [customerId], references: [id], onDelete: SetNull)
  items               TransactionItem[]
  TransactionShipping TransactionShipping[]

  @@map("transaction_record")
}

model TransactionItem {
  id            Int   @id @default(autoincrement())
  transactionId Int   @map("transaction_id")
  quantity      Int
  totalPrice    Float @map("total_price")

  // --- MODIFIED FIELDS: Now links to EITHER a standard product OR a variant ---
  productId        Int? @map("product_id")
  productVariantId Int? @map("product_variant_id")

  // --- RELATIONS ---
  transaction    TransactionRecord @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  product        Product?          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariant ProductVariant?   @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@map("transaction_items")
}
model Gowhats {
  id              Int           @id @default(autoincrement())
  organisation    Organisation  @relation(fields: [organisationId], references: [id])
  organisationId  Int           @unique
  whatsappNumber  String
  accessToken    String   @db.Text  // 👈 This is the key change - from String to Text
  businessId      String
  phoneNumberId   String
}
model whatsapptracker {
  id            Int      @id @default(autoincrement())
  transactionId Int
  templateType  String
  phoneNumber   String
  sentAt        DateTime @default(now())

  @@index([transactionId], map: "WhatsAppTracker_transactionId_idx")
}
model PendingCustomerScan {
  id             Int      @id @default(autoincrement())
  organisationId Int
  customerName   String
  customerPhone  String
  createdAt      DateTime @default(now())
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@index([organisationId])
}
model Customer {
  id             Int     @id @default(autoincrement())
  name           String
  phone          String
  district       String?
  state          String?
  pincode        String?
  email          String?
  flatNo         String? @map("flat_no")
  street         String?
  organisationId Int     @map("organisation_id")

  organisation       Organisation         @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  transactions       TransactionRecord[]
  CustomerSubmission CustomerSubmission[]
  invoices Invoice[]
  @@unique([phone, organisationId])


  @@map("customers")
}

model Inventory {
  id             Int  @id @default(autoincrement())
  productId      Int  @map("product_id")
  categoryId     Int? @map("category_id")
  organisationId Int  @map("organisation_id")
  quantity       Int

  product      Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  category     ProductCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  organisation Organisation     @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@unique([productId, organisationId])
  @@map("inventory")
}

model SubscriptionDetails {
  id             Int      @id @default(autoincrement())
  organisationId Int      @map("organisation_id")
  date           DateTime @db.Date
  month          Int
  year           Int
  smsCount       Int      @map("sms_count")
  shopName       String   @map("shop_name")
  mobileNumber   String   @map("mobile_number")

  @@map("subscription_details")
}

// --- MODIFIED ENUM and MODEL ShippingMethod ---
enum ShippingMethodType {
  FREE_SHIPPING
  COURIER_PARTNER
  CUSTOM_SHIPPING // <--- NEW ENUM VALUE
}

model ShippingMethod {
  id             Int                @id @default(autoincrement())
  name           String
  type           ShippingMethodType // Uses the updated enum
  minAmount      Float?             @map("min_amount")
  useWeight      Boolean            @default(false) @map("use_weight")
  ratePerKg      Float?             @map("rate_per_kg")
  fixedRate      Float?             @map("fixed_rate")
  isActive       Boolean            @default(true) @map("is_active")
  organisationId Int                @map("organisation_id")
  customRate     Float? // <--- NEW FIELD (if db col is customRate)
  //      use @map("custom_rate") if db col is custom_rate
  organisation   Organisation       @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")

  // Optional: Add relation back to TransactionRecord if you made shippingMethodId a foreign key
  // transactions   TransactionRecord[] @relation("TransactionShippingMethod")

  @@map("shipping_methods")
}

model TransactionShipping {
  id            Int                @id @default(autoincrement())
  transactionId Int                @map("transaction_id")
  methodName    String             @map("method_name")
  methodType    ShippingMethodType @map("method_type") // <--- USES THE UPDATED ENUM
  baseRate      Float?             @map("base_rate")
  weightCharge  Float?             @map("weight_charge")
  totalWeight   Float?             @map("total_weight")
  totalCost     Float              @map("total_cost")
  transaction   TransactionRecord  @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("transaction_shipping")
}

model Mandate {
  id                  Int          @id @default(autoincrement())
  organisationId      Int
  merchantTranId      String       @unique
  bankRRN             String?
  UMN                 String?
  amount              Float
  status              String
  payerVA             String
  payerName           String?
  payerMobile         String?
  txnInitDate         DateTime?
  txnCompletionDate   DateTime?
  responseCode        String?
  respCodeDescription String?
  organisation        Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@map("mandates")
}

model ActiveMandate {
  id                      Int       @id @default(autoincrement())
  organisationId          Int       @unique
  UMN                     String?
  mandateSeqNo            Int       @default(1)
  amount                  Float
  notificationRetries     Int       @default(0)
  retryCount              Int       @default(0)
  status                  String    @default("INACTIVE")
  payerVA                 String
  payerName               String?
  payerMobile             String?
  notified                Boolean   @default(false)
  lastAttemptAt           DateTime? @db.Timestamp // Ensure this matches DB type
  lastNotificationAttempt DateTime? @db.Timestamp // Ensure this matches DB type

  organisation Organisation @relation(fields: [organisationId], references: [id])

  @@map("active_mandates")
}

model MandateNotification {
  id             Int      @id @default(autoincrement())
  organisationId Int
  type           String
  message        String
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())

  organisation Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@index([organisationId])
  @@map("mandate_notifications")
}

// --- NEW MODELS ---
model CustomShipping {
  id             Int          @id @default(autoincrement())
  price          Float
  name           String?
  organisationId Int
  organisation   Organisation @relation(fields: [organisationId], references: [id]) // onDelete: RESTRICT by default on non-cascading FKs

  @@index([organisationId])
  @@map("custom_shippings")
}

model Tax {
  id             Int          @id @default(autoincrement())
  organisationId Int
  name           String
  type           String
  value          Float
  autoApply      Boolean      @map("autoApply")   
  organisation   Organisation @relation(fields: [organisationId], references: [id]) // onDelete: RESTRICT by default

  @@index([organisationId])
  @@map("tax")
}