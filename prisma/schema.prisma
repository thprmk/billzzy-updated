generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Expense {
  id        Int      @id @default(autoincrement())
  title     String
  amount    Float
  category  String
  date      DateTime
  notes     String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Organisation {
  id                     Int                   @id @default(autoincrement())
  password               String
  resetToken             String?               @map("reset_token")
  resetTokenExpiry       DateTime?             @map("reset_token_expiry")
  email                  String                @unique
  phone                  String
  name                   String
  companySize            String                @map("company_size")
  shopName               String                @map("shop_name")
  flatNo                 String                @map("flatno")
  street                 String
  district               String
  city                   String?
  state                  String
  smsCount               Int                   @default(0) @map("sms_count")
  smsCost                Float                 @default(0) @map("sms_cost")
  country                String
  pincode                String
  mobileNumber           String                @map("mobile_number")
  landlineNumber         String?               @map("landline_number")
  websiteAddress         String?               @map("website_address")
  gstNumber              String?               @map("gst_number")
  subscriptionType       String                @map("subscription_type")
  endDate                DateTime              @map("end_date") @db.DateTime(0)
  whatsappNumber         String?               @map("whatsapp_number")
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  razorpayAccessToken    String?               @map("razorpay_access_token") @db.Text
  razorpayRefreshToken   String?               @map("razorpay_refresh_token") @db.Text
  razorpayTokenExpiresAt DateTime?             @map("razorpay_token_expires_at")
  razorpayAccountId      String?               @map("razorpay_account_id")
  razorpayState          String?               @map("razorpay_state")
  razorpayStateExpiresAt DateTime?             @map("razorpay_state_expires_at")
  monthlyUsage           Int                   @default(0)
  shopifyToken           String?               @map("shopify_token")
  shopifyDomain          String?               @map("shopify_domain")
  billCounter            Int                   @default(0) @map("bill_counter")
  activeMandates         ActiveMandate?
  customShippings        CustomShipping[]
  customers              Customer[]
  customersubmission     customersubmission[]
  gowhats                gowhats?
  inventory              Inventory[]
  invoices               Invoice[]
  MandateNotification    MandateNotification[]
  Mandate                Mandate[]
  productCategories      ProductCategory[]
  products               Product[]
  sellers                Seller[]
  ShippingMethod         ShippingMethod[]
  taxes                  Tax[]
  transactions           TransactionRecord[]

  @@index([resetToken])
  @@map("organisation")
}

model ProductCategory {
  id             Int          @id @default(autoincrement())
  name           String
  organisationId Int          @map("organisation_id")
  inventory      Inventory[]
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  products       Product[]

  @@index([organisationId], map: "product_categories_organisation_id_fkey")
  @@map("product_categories")
}

model Product {
  id               Int               @id @default(autoincrement())
  name             String
  productType      ProductType       @default(STANDARD)
  SKU              String?
  netPrice         Float?            @map("net_price")
  sellingPrice     Float?            @map("selling_price")
  quantity         Int?
  seller           String
  organisationId   Int               @map("organisation_id")
  categoryId       Int?              @map("category_id")
  size             String?
  color            String?
  inventory        Inventory[]
  invoiceItems     InvoiceItem[]
  variants         ProductVariant[]
  category         ProductCategory?  @relation(fields: [categoryId], references: [id])
  organisation     Organisation      @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  transactionItems TransactionItem[]

  @@index([categoryId], map: "products_category_id_fkey")
  @@index([organisationId], map: "products_organisation_id_fkey")
  @@map("products")
}

model Invoice {
  id                   Int           @id @default(autoincrement())
  invoiceNumber        String        @map("invoice_number")
  issueDate            DateTime      @db.Date
  dueDate              DateTime      @db.Date
  status               String        @default("DRAFT")
  notes                String?       @db.Text
  subTotal             Float         @map("sub_total")
  totalTax             Float         @map("total_tax")
  totalAmount          Float         @map("total_amount")
  customerId           Int?          @map("customer_id")
  organisationId       Int           @map("organisation_id")
  createdTransactionId Int?          @unique @map("created_transaction_id")
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  items                InvoiceItem[]
  customer             Customer?     @relation(fields: [customerId], references: [id])
  organisation         Organisation  @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@unique([organisationId, invoiceNumber])
  @@index([customerId], map: "invoices_customer_id_fkey")
  @@map("invoices")
}

model InvoiceItem {
  id          Int      @id @default(autoincrement())
  description String
  quantity    Float
  unitPrice   Float    @map("unit_price")
  total       Float
  productId   Int?     @map("product_id")
  invoiceId   Int      @map("invoice_id")
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  product     Product? @relation(fields: [productId], references: [id])

  @@index([invoiceId], map: "invoice_items_invoice_id_fkey")
  @@index([productId], map: "invoice_items_product_id_fkey")
  @@map("invoice_items")
}

model ProductVariant {
  id               Int               @id @default(autoincrement())
  SKU              String            @unique
  netPrice         Float             @map("net_price")
  sellingPrice     Float             @map("selling_price")
  quantity         Int
  size             String?
  color            String?
  productId        Int               @map("product_id")
  product          Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  transactionItems TransactionItem[]

  @@index([productId], map: "product_variants_product_id_fkey")
  @@map("product_variants")
}

model Seller {
  id             Int          @id @default(autoincrement())
  name           String
  contact        String
  type           String
  organisationId Int          @map("organisation_id")
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@index([organisationId], map: "sellers_organisation_id_fkey")
  @@map("sellers")
}

model TransactionRecord {
  id                  Int                   @id @default(autoincrement())
  billNo              Int                   @unique @map("bill_no")
  totalPrice          Float                 @map("total_price")
  paymentMethod       String                @map("payment_method")
  amountPaid          Float                 @default(0) @map("amount_paid")
  balance             Float                 @default(0)
  billingMode         String                @map("billing_mode")
  organisationId      Int                   @map("organisation_id")
  date                DateTime              @db.Date
  companyBillNo       Int?                  @map("company_bill_no")
  time                DateTime              @db.Time(0)
  trackingNumber      String?               @map("tracking_number")
  weight              Float?
  customerId          Int?                  @map("customer_id")
  status              String                @default("confirmed")
  notes               String?               @db.Text
  paymentId           String?               @map("payment_id")
  paymentStatus       PaymentStatus         @default(PENDING) @map("payment_status")
  isEdited            Boolean               @default(false) @map("isEdited")
  gstAmount           Float?                @map("gst_amount")
  gstPercent          Float?                @map("gst_percent")
  shippingCost        Float?
  shippingMethodId    Int?
  taxAmount           Float?
  salesSource         String?               @map("sales_source")
  items               TransactionItem[]
  customer            Customer?             @relation(fields: [customerId], references: [id])
  organisation        Organisation          @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  TransactionShipping TransactionShipping[]

  @@index([customerId], map: "transaction_record_customer_id_fkey")
  @@index([organisationId], map: "transaction_record_organisation_id_fkey")
  @@map("transaction_record")
}

model TransactionItem {
  id               Int               @id @default(autoincrement())
  transactionId    Int               @map("transaction_id")
  quantity         Int
  totalPrice       Float             @map("total_price")
  productId        Int?              @map("product_id")
  productVariantId Int?              @map("product_variant_id")
  product          Product?          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariant   ProductVariant?   @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  transaction      TransactionRecord @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([productId], map: "transaction_items_product_id_fkey")
  @@index([productVariantId], map: "transaction_items_product_variant_id_fkey")
  @@index([transactionId], map: "transaction_items_transaction_id_fkey")
  @@map("transaction_items")
}

model Customer {
  id                 Int                  @id @default(autoincrement())
  name               String
  phone              String
  district           String?
  state              String?
  pincode            String?
  email              String?
  flatNo             String?              @map("flat_no")
  street             String?
  organisationId     Int                  @map("organisation_id")
  organisation       Organisation         @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  customersubmission customersubmission[]
  invoices           Invoice[]
  transactions       TransactionRecord[]

  @@index([organisationId], map: "customers_organisation_id_fkey")
  @@map("customers")
}

model Inventory {
  id             Int              @id @default(autoincrement())
  productId      Int              @map("product_id")
  categoryId     Int?             @map("category_id")
  organisationId Int              @map("organisation_id")
  quantity       Int
  category       ProductCategory? @relation(fields: [categoryId], references: [id])
  organisation   Organisation     @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  product        Product          @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, organisationId])
  @@index([categoryId], map: "inventory_category_id_fkey")
  @@index([organisationId], map: "inventory_organisation_id_fkey")
  @@map("inventory")
}

model SubscriptionDetails {
  id             Int      @id @default(autoincrement())
  organisationId Int      @map("organisation_id")
  date           DateTime @db.Date
  month          Int
  year           Int
  smsCount       Int      @map("sms_count")
  shopName       String   @map("shop_name")
  mobileNumber   String   @map("mobile_number")

  @@map("subscription_details")
}

model ShippingMethod {
  id             Int                @id @default(autoincrement())
  name           String
  type           ShippingMethodType
  minAmount      Float?             @map("min_amount")
  useWeight      Boolean            @default(false) @map("use_weight")
  ratePerKg      Float?             @map("rate_per_kg")
  fixedRate      Float?             @map("fixed_rate")
  isActive       Boolean            @default(true) @map("is_active")
  organisationId Int                @map("organisation_id")
  customRate     Float?
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")
  organisation   Organisation       @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@index([organisationId], map: "shipping_methods_organisation_id_fkey")
  @@map("shipping_methods")
}

model TransactionShipping {
  id            Int                @id @default(autoincrement())
  transactionId Int                @map("transaction_id")
  methodName    String             @map("method_name")
  methodType    ShippingMethodType @map("method_type")
  baseRate      Float?             @map("base_rate")
  weightCharge  Float?             @map("weight_charge")
  totalWeight   Float?             @map("total_weight")
  totalCost     Float              @map("total_cost")
  transaction   TransactionRecord  @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([transactionId], map: "transaction_shipping_transaction_id_fkey")
  @@map("transaction_shipping")
}

model Mandate {
  id                  Int          @id @default(autoincrement())
  organisationId      Int
  merchantTranId      String       @unique
  bankRRN             String?
  UMN                 String?
  amount              Float
  status              String
  payerVA             String
  payerName           String?
  payerMobile         String?
  txnInitDate         DateTime?
  txnCompletionDate   DateTime?
  responseCode        String?
  respCodeDescription String?
  organisation        Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@index([organisationId], map: "mandates_organisationId_fkey")
  @@map("mandates")
}

model ActiveMandate {
  id                      Int          @id @default(autoincrement())
  organisationId          Int          @unique
  UMN                     String?
  mandateSeqNo            Int          @default(1)
  amount                  Float
  notificationRetries     Int          @default(0)
  retryCount              Int          @default(0)
  status                  String       @default("INACTIVE")
  payerVA                 String
  payerName               String?
  payerMobile             String?
  notified                Boolean      @default(false)
  lastAttemptAt           DateTime?    @db.Timestamp(0)
  lastNotificationAttempt DateTime?    @db.Timestamp(0)
  organisation            Organisation @relation(fields: [organisationId], references: [id])

  @@map("active_mandates")
}

model MandateNotification {
  id             Int          @id @default(autoincrement())
  organisationId Int
  type           String
  message        String
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@index([organisationId])
  @@map("mandate_notifications")
}

model CustomShipping {
  id             Int          @id @default(autoincrement())
  price          Float
  name           String?
  organisationId Int
  organisation   Organisation @relation(fields: [organisationId], references: [id])

  @@index([organisationId])
  @@map("custom_shippings")
}

model Tax {
  id             Int          @id @default(autoincrement())
  organisationId Int
  name           String
  type           String
  value          Float
  autoApply      Boolean      @map("autoApply")
  organisation   Organisation @relation(fields: [organisationId], references: [id])

  @@index([organisationId])
  @@map("tax")
}

model customersubmission {
  id             Int          @id @default(autoincrement())
  token          String       @unique(map: "CustomerSubmission_token_key")
  organisationId Int
  customerId     Int?
  notes          String?
  status         String       @default("pending")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  customers      Customer?    @relation(fields: [customerId], references: [id], map: "CustomerSubmission_customerId_fkey")
  organisation   Organisation @relation(fields: [organisationId], references: [id], map: "CustomerSubmission_organisationId_fkey")

  @@index([customerId], map: "CustomerSubmission_customerId_fkey")
  @@index([organisationId], map: "CustomerSubmission_organisationId_idx")
}

model gowhats {
  id             Int          @id @default(autoincrement())
  organisationId Int          @unique(map: "Gowhats_organisationId_key")
  whatsappNumber String
  accessToken    String       @db.Text
  businessId     String
  phoneNumberId  String
  organisation   Organisation @relation(fields: [organisationId], references: [id], map: "Gowhats_organisationId_fkey")
}

enum ProductType {
  STANDARD
  BOUTIQUE
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  EXPIRED
}

enum ShippingMethodType {
  FREE_SHIPPING
  COURIER_PARTNER
  CUSTOM_SHIPPING
}
